<launch>
  <arg name="node_start_delay" default="2.0" />  

  <!-- Define arguments -->
  <arg name="min_dist_to_transition_arg" default="0.003"/>
  <arg name="steps_per_mm_arg" default="80"/>
  <arg name="wheel_radius_arg" default="0.0508"/>
  <arg name="frame_base_length_arg" default="0.5969"/>
  <arg name="points_threshold_arg" default="0.01"/>
  <arg name="ticks_per_revolution_arg" default="4000"/>
  <arg name="points_csv_filename_arg" default="$(find controls_pkg)/csv_files/test_points.csv"/>

  <arg name="sim_arg" default="false"/>
  <arg name="interpolation_enabled_arg" default="false"/>
  <arg name="pen_wait_duration_arg" default="1.25"/>
  

  <!-- Static transform -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_static_broadcaster" args="0.152 0.152 0 -0.7071068 0.7071068 0 0 base_link pointer_link" />

  <!-- Run serial_node.py in a new terminal -->
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node" unless="$(arg sim_arg)" output="screen">
    <param name="port" value="/dev/ttyACM0"/> <!-- Update port value as needed -->
    <param name="baud" value="115200"/> <!-- Set the baud rate -->
  </node>

  <!-- RVIZ -->
  <node name="rviz" pkg="rviz" type="rviz" if="$(arg sim_arg)" args="-d $(find controls_pkg)/rviz/sim.rviz" />
  <!-- Sim encoder node -->
  <node pkg="controls_pkg" type="dummy_encoder_node.py" if="$(arg sim_arg)" name="dummy_encoder_node" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
    <param name="node_freq" type="int" value="10"/>
    <param name="forward_distance" type="double" value="4.0"/>
    <param name="turn_angle" type="double" value="16.0"/>
    <param name="straight_speed" type="double" value="0.1"/>
    <param name="turn_speed" type="double" value="0.35"/>

    <param name="wheel_radius" type="double" value="$(arg wheel_radius_arg)"/>
    <param name="frame_base_length" type="double" value="$(arg frame_base_length_arg)"/>
    <param name="ticks_per_revolution" type="int" value="$(arg ticks_per_revolution_arg)"/>
  </node>
<!-- 
  <node pkg="controls_pkg" type="auto_command_position_node.py" name="auto_command_position_node" output="screen"  launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
    <param name="enable_stepper" type="bool" value="true"/>
  </node> -->

  <!-- <node pkg="controls_pkg" type="tf_testing.py" name="tf_testing_node" output="screen"/> -->

  <node pkg="controls_pkg" type="points_manager_node.py" name="points_manager_node" output="screen"  launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' ">
    <param name="min_dist_to_transition" type="double" value="$(arg min_dist_to_transition_arg)"/>
    <param name="steps_per_mm" type="double" value="$(arg steps_per_mm_arg)"/>
    <param name="wheel_radius" type="double" value="$(arg wheel_radius_arg)"/>
    <param name="frame_base_length" type="double" value="$(arg frame_base_length_arg)"/>
    <param name="points_threshold" type="double" value="$(arg points_threshold_arg)"/>
    <param name="ticks_per_revolution" type="int" value="$(arg ticks_per_revolution_arg)"/>
    <param name="points_file_name" type="string" value="$(arg points_csv_filename_arg)"/>
    <param name="sim_enabled" type="bool" value="$(arg sim_arg)"/>
    <param name="interpolation_enabled" type="bool" value="$(arg interpolation_enabled_arg)"/>
    <param name="pen_wait_duration" type="double" value="$(arg pen_wait_duration_arg)"/>
  </node>

</launch>
